'use client'; // Mark this file as a client component

import { useEffect } from 'react';
import { jsPDF } from 'jspdf';

interface PDFGeneratorProps {
  transaksi: {
    id_transaksi: string;
    total_transaksi: number;
    waktu_transaksi: string;
    poin: number;
    nama_pelanggan: string;
    nomor_hp_pelanggan: string;
    nama_jenjang: string;          // Nama jenjang diskon (jika ada)
    diskon: number;                // Diskon yang diterapkan pada transaksi
    batas_pemakaian: number;       // Batas pemakaian diskon (jika ada)
    detail_pesanan?: { 
      nama_produk: string; 
      harga_produk: number 
    }[];
  };
}

const PDFGenerator: React.FC<PDFGeneratorProps> = ({ transaksi }) => {
  const generatePDF = async () => {
    const doc = new jsPDF();

    // Ambil logo dari path file
    const logoUrl = '/logo.png'; // Path ke logo Anda di public folder

    // Fetch logo untuk mendapatkan data dalam format Blob
    const response = await fetch(logoUrl);
    const blob = await response.blob();

    // Convert Blob ke Base64
    const reader = new FileReader();
    reader.onloadend = () => {
      const logoBase64 = reader.result as string;

      // Tambahkan logo ke PDF
      doc.addImage(logoBase64, 'PNG', 10, 10, 30, 30);

      // Tambahkan judul
      doc.setFont('Helvetica', 'bold');
      doc.setFontSize(20);
      doc.text('Detail Transaksi', 50, 20); // Judul diatur agar sejajar dengan logo

      // Tambahkan garis pemisah
      doc.setDrawColor(0); // Warna hitam
      doc.setLineWidth(0.5);
      doc.line(10, 45, 200, 45);

      // Tambahkan detail transaksi
      doc.setFont('Helvetica', 'normal');
      doc.setFontSize(14);

      let yPosition = 60; // Posisi awal teks di Y
      const lineSpacing = 10; // Jarak antar baris
      doc.text(`ID Transaksi: ${transaksi.id_transaksi}`, 10, yPosition);
      yPosition += lineSpacing;
      doc.text(`Nama Pelanggan: ${transaksi.nama_pelanggan}`, 10, yPosition);
      yPosition += lineSpacing;
      doc.text(`Nomor HP Pelanggan: ${transaksi.nomor_hp_pelanggan}`, 10, yPosition);
      yPosition += lineSpacing;
      doc.text(`Total Transaksi: Rp ${transaksi.total_transaksi.toLocaleString('id-ID')}`, 10, yPosition);
      yPosition += lineSpacing;
      doc.text(`Tanggal Transaksi: ${transaksi.waktu_transaksi}`, 10, yPosition);
      yPosition += lineSpacing;
      

      // Tambahkan detail pesanan jika ada
      if (transaksi.detail_pesanan && transaksi.detail_pesanan.length > 0) {
        doc.text('Detail Pesanan:', 10, yPosition);
        yPosition += lineSpacing;
        transaksi.detail_pesanan.forEach((item, index) => {
          doc.text(`Produk ${index + 1}: ${item.nama_produk}`, 10, yPosition);
          yPosition += lineSpacing;
          doc.text(`Harga: Rp ${item.harga_produk.toLocaleString('id-ID')}`, 10, yPosition);
          yPosition += lineSpacing;
        });
      }

      // // Tambahkan ucapan terima kasih
      yPosition += lineSpacing * 2; // Beri jarak lebih besar
      doc.setFontSize(12);
      doc.setTextColor(150);
      doc.text('Terima kasih atas transaksi Anda!', 10, yPosition);

      // Tambahkan footer
      yPosition += lineSpacing * 3; // Tambahkan lebih banyak ruang
      doc.setTextColor(100);
      doc.setFontSize(10);
      doc.text('Generated by Belikopi.', 10, 290, { align: 'left' });

      // Simpan file PDF
      doc.save(`transaksi_${transaksi.id_transaksi}.pdf`);
    };

    reader.readAsDataURL(blob);
  };

  useEffect(() => {
    generatePDF();
  }, []);

  return null; // Komponen tidak menampilkan elemen
};

export default PDFGenerator;